import Head from "next/head";
import Header from "@/components/Header";
import Landing from "@/components/Landing";
import Product from "@/components/Product";
import { useSelector } from "react-redux";
import { Tab } from "@headlessui/react";
import Basket from "@/components/Basket";
import dynamic from "next/dynamic";
import Loader from "@/components/Loader";

function Home() {
  const {
    categories,
    loading: categoriesLoading,
    error: categoriesError,
  } = useSelector((state) => state.categories);
  const {
    products,
    loading: productsLoading,
    error: productsError,
  } = useSelector((state) => state.products);

  const getProductsByCategory = (category) => {
    // Find products with the same category
    const filteredProducts = products.filter(
      (product) => product.category === category
    );
    // if no products found, return empty array
    if (filteredProducts.length === 0) return false;
    // if products found, return products
    return filteredProducts;
  };

  const showProductsByCategory = (category) => {
    const filteredProducts = getProductsByCategory(category);
    if (filteredProducts) {
      return filteredProducts.map((product) => (
        <Product product={product} key={product._id} />
      ));
    }
    return (
      <h1 className="col-span-3 text-center text-2xl font-medium tracking-wide text-white md:text-3xl">
        No products found
      </h1>
    );
  };

  return (
    <>
      <Head>
        <title>StoreYEK</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Header />

      {categoriesLoading || productsLoading ? (
        <Loader />
      ) : categoriesError || productsError ? (
        <main className="relative h-full-nav bg-[#E7ECEE]">
          <div className="flex min-h-full-nav items-center justify-center">
            <h1 className="bg-gradient-to-r from-purple-500 to-pink-500 bg-clip-text text-2xl font-medium tracking-wide text-transparent">
              {categoriesError || productsError}
            </h1>
          </div>
        </main>
      ) : (
        <>
          <Basket />
          <main className="relative h-[200vh] bg-[#E7ECEE]">
            <Landing />
          </main>
          <section className="relative z-40 -mt-[100vh] min-h-dscreen bg-[#1B1B1B]">
            <div className="space-y-10 py-16">
              <h1 className="text-center text-4xl font-medium tracking-wide text-white md:text-5xl">
                Latest Products
              </h1>

              <Tab.Group>
                <Tab.List className="flex justify-center">
                  {categories.map((category) => (
                    <Tab
                      key={category._id}
                      id={category._id}
                      className={({ selected }) =>
                        `whitespace-nowrap rounded-t-lg py-3 px-5 text-sm font-light outline-none md:py-4 md:px-6 md:text-base ${
                          selected
                            ? "borderGradient bg-[#35383C] text-white"
                            : "border-b-2 border-[#35383C] text-[#747474]"
                        }`
                      }
                    >
                      <span>{category.name}</span>
                    </Tab>
                  ))}
                </Tab.List>
                <Tab.Panels className="mx-auto max-w-fit pt-10 pb-24 text-white sm:px-4">
                  {categories.map((category) => (
                    <Tab.Panel key={category._id} className="tabPanel">
                      {showProductsByCategory(category._id)}
                    </Tab.Panel>
                  ))}
                </Tab.Panels>
              </Tab.Group>
            </div>
          </section>
        </>
      )}
    </>
  );
}

export default dynamic(() => Promise.resolve(Home), { ssr: false }); // for the hydration error
